from apps.bot.management.commands.bot import bot
from apps.bot.utils.tools import WBPersonalApiClient
from django.db import models  # noqa
from django.utils import timezone


class Personal(models.Model):

    user = models.ForeignKey('bot.TelegramUser', on_delete=models.CASCADE)
    supplierId = models.CharField('ID –ø—Ä–æ–¥–∞–≤—Ü–∞', max_length=255, null=False, blank=False)
    oldId = models.IntegerField('–°—Ç–∞—Ä—ã–π ID –ø—Ä–æ–¥–∞–≤—Ü–∞', null=False, blank=False)
    name = models.CharField('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', max_length=150, null=False, blank=False)
    full_name = models.TextField('–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', null=False, blank=False)

    class Meta:
        verbose_name = '–ö–∞–±–∏–Ω–µ—Ç WB'
        verbose_name_plural = '–ö–∞–±–∏–Ω–µ—Ç—ã WB'

    def get_client(self):
        return WBPersonalApiClient(self.supplierId, self.user.WBToken)

    def get_tracked_articles(self):
        return self.trackedarticle_set.all()

    def __str__(self):
        return self.name


class TrackedArticle(models.Model):

    personal = models.ForeignKey('polls.Personal', on_delete=models.CASCADE, verbose_name='–ö–∞–±–∏–Ω–µ—Ç')
    nmId = models.CharField('–ê—Ä—Ç–∏–∫—É–ª WB', max_length=20, null=False)
    article = models.CharField('–ê—Ä—Ç–∏–∫—É–ª', max_length=255, null=False, blank=False)
    brand = models.CharField('–ë—Ä–µ–Ω–¥', max_length=255, blank=True)

    class Meta:
        verbose_name = '–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∞—Ä—Ç–∏–∫—É–ª'
        verbose_name_plural = '–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã'

    def __str__(self):
        return f'{self.nmId} {self.article}'


class Feedback(models.Model):

    wb_id = models.CharField('WB ID', max_length=255, null=False, blank=False)
    article = models.ForeignKey('polls.TrackedArticle', on_delete=models.CASCADE, verbose_name='–ê—Ä—Ç–∏–∫—É–ª', null=False, blank=False)
    text = models.TextField('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', null=False, blank=False)
    stars = models.SmallIntegerField('–ö–æ–ª-–≤–æ –∑–≤–µ–∑–¥', null=False, blank=False)
    created_date = models.DateTimeField('–î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞ –Ω–∞ WB')

    class Meta:
        verbose_name = '–û—Ç–∑—ã–≤ –æ–± –∞—Ä—Ç–∏–∫—É–ª–µ'
        verbose_name_plural = '–û—Ç–∑—ã–≤—ã –æ–± –∞—Ä—Ç–∏–∫—É–ª–µ'

    def format_notification_message(self):
        return '<b>üçá %s</b>\n\n' % (self.article.personal.name) + \
               '<b>üîî –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!</b>\n' + \
               f'üè∑ <a href="https://www.wildberries.ru/catalog/{self.article.nmId}/detail.aspx?targetUrl=SP">{self.article.nmId}</a> | {self.article.article}\n\n' + \
               '<b>üí´ –û—Ü–µ–Ω–∫–∞:</b> %s\n' % ('‚≠êÔ∏è' * self.stars) + \
               '<b>üìÉ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞:</b>\n%s\n\n' % (self.text) + \
               '<i>üïê –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞:</i> %s' % (timezone.make_naive(self.created_date).strftime('%Y.%m.%d %H:%M:%S'))

    def send_notify(self):
        return bot.notify_new_feedback(self)

    def __str__(self):
        return f'{self.id} | {self.article}'


class FeedbackPhoto(models.Model):

    feedback = models.ForeignKey('polls.Feedback', on_delete=models.CASCADE, verbose_name='–û—Ç–∑—ã–≤', null=False, blank=False)
    url = models.URLField('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ', max_length=255)

    class Meta:
        verbose_name = '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–∑—ã–≤–∞'
        verbose_name_plural = '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–∑—ã–≤–æ–≤'

    def __str__(self):
        return self.url
